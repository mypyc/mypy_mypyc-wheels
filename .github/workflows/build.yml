name: Build wheels

on: [push, pull_request]

jobs:
  build_wheels:
    name: py${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # cibuildwheel builds linux wheels inside a manylinux container
        # it also takes care of procuring the correct python version for us
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [35, 36, 37, 38, 39]

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.7"
      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel==1.6
      - name: Checkout mypy
        shell: bash
        # use a commit hash checked into a file to get the mypy revision to build.
        # submodules prove problematic since .git is outside cibuildwheel's manylinux container
        run: |
          COMMIT=$(cat mypy_commit)
          git clone https://github.com/python/mypy.git
          cd mypy
          git checkout $COMMIT
          git submodule update --init --recursive
      - name: Build wheels
        run: |
          python mypy/misc/build_wheel.py --output-dir wheelhouse --python-version ${{ matrix.python-version}}
        if: matrix.os != 'windows-latest'
      - name: Build wheels (Windows)
        shell: cmd
        # IMPORTANT: Without a 64-bit compiler, we may run out of memory during the build
        run: |
          "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set DISTUTILS_USE_SDK=1
          python mypy/misc/build_wheel.py --output-dir wheelhouse --python-version ${{ matrix.python-version}}
        if: matrix.os == 'windows-latest'
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: ./wheelhouse/*.whl
  build_sdist_python_wheel:
    name: sdist and python wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: "3.7"
      - name: Checkout mypy
        shell: bash
        run: |
          COMMIT=$(cat mypy_commit)
          git clone https://github.com/python/mypy.git
          cd mypy
          git checkout $COMMIT
          git submodule update --init --recursive
      - name: Run check-manifest
        run: |
          cd mypy
          pip install check-manifest
          check-manifest -v
      - name: Build sdist and wheel
        run: |
          cd mypy
          pip install --upgrade setuptools pip wheel
          python setup.py sdist bdist_wheel
      - uses: actions/upload-artifact@v2
        with:
          name: dist
          path: |
            mypy/dist/*.whl
            mypy/dist/*.tar.gz
  release:
    name: create release
    needs: [build_wheels, build_sdist_python_wheel]
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        # https://github.com/actions/upload-release-asset/issues/47
        uses: actions/github-script@v2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const fs = require('fs').promises;
            const { repo: { owner, repo }, sha } = context;

            console.log('environment', process.versions);
            console.log({ owner, repo, sha });

            const release = await github.repos.createRelease({
              owner, repo,
              // if GITHUB_REF just appears to be a branch, use tag-{commit} as the tag
              tag_name: process.env.GITHUB_REF.includes("refs/heads/") ? "tag-" + sha : process.env.GITHUB_REF.split("/").pop(),
              target_commitish: sha
            });

            console.log('created release', { release });

            for (let file of await fs.readdir('dist')) {
              console.log('uploading', file);

              await github.repos.uploadReleaseAsset({
                owner, repo,
                release_id: release.data.id,
                name: file,
                data: await fs.readFile(`./dist/${file}`)
              });
            }
